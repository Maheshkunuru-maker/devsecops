AWSTemplateFormatVersion: '2010-09-09'
Description:  Cloud Formation Template Created By Mahesh
Metadata: {
    "Version": "v1.0",
    "Comments": "Created by Mahesh",
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
      {
        "Label": { "default": "Network Configuration" },
        "Parameters": ["CidrBlock", "pubAvailabilityZone", "pubSubnetCIDR","privAvailabilityZone", "privSubnet1CIDR"]
      },
      {
        "Label": { "default": "EC2 Instances Configuration" },
        "Parameters": ["InstanceName", "InstanceType", "Environment"]
      }
      ]
    }
  }
  
Parameters:
  CidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 170.20.0.0/16
    Description: VPC CIDR Block (eg 20.0.0.0/16)
    Type: String
  pubAvailabilityZone:
    Description: The AvailabilityZone to use for the first subnet
    Type: AWS::EC2::AvailabilityZone::Name
  pubSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 172.20.0.0/24
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String
  privAvailabilityZone:
    Description: The AvailabilityZone to use for the second subnet
    Type: AWS::EC2::AvailabilityZone::Name
  privSubnet1CIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 170.20.20.0/24
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String

  Project:
    Type: String 
    Description: >
      Project Name (used for tracking the resources for a project)
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: CF
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  EnvName:
    Description: Application environment for which this network is being created. e.g. Development/Production.
    Type: String
    Default: UAT
    AllowedValues: ["UAT", "DEV", "QA", "PROD" ]

  InstancePublicIP:
    Description: Specifies whether to launch instances with public IP addresses in your VPC.
    Type: String
    Default : "True"
    AllowedValues : ["False", "True"]

  InstanceAMI:
    Description: "AMI for use with the EC2 instances"
    Type: String
    Default: "ami-0d5eff06f840b45e9"

Resources:

#Creating the VPC with all the network configurations.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Join ['-',[!Sub '${Project}',!Sub '${EnvName}','VPC']]

  VPCIPv6CIDRBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-',[!Sub '${Project}',!Sub '${EnvName}','IGW']]

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-',[!Sub '${Project}',!Sub '${EnvName}','Public Route Table']]
      VpcId:
        Ref: VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTable

  pubSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: pubAvailabilityZone}
      CidrBlock: {Ref: pubSubnet1CIDR}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['-',[!Sub '${Project}',!Sub '${EnvName}','Public-Subnet-AZ']]
      VpcId: !Ref VPC


  privSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: privAvailabilityZone}
      CidrBlock: {Ref: privSubnet1CIDR}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['-',[!Sub '${Project}',!Sub '${EnvName}','Private-Subnet-AZ']]
      VpcId: !Ref VPC



  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: VPC


  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref privSubnet
      Tags:
        - Key: Name
          Value: !Join ['-',[!Sub '${Project}',!Sub '${EnvName}','NATGW']]  

  PublicSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId: !Ref pubSubnet


  PrivateSubnet1Associaton:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId: !Ref privSubnet

  WebSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH & HTTPD access via port 22 & 80 respectively
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  #Creating the instance to install the jenkins and ansible
  Jenkins:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      ImageId: !Ref InstanceAMI
      Tags:
        - Key: Name
          Value: !Join ['-',[!Sub '${Project}',!Sub '${EnvName}','Jenkins']]
      InstanceType: !Ref InstanceType
      SubnetId: !Ref pubSubnet
      SecurityGroupIds:
        - !Ref WebSecGrp
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x
            yum update -y
            yum install java-1.8.0-openjdk
            yum install ansible -y
            yum install -y python2
            sudo yum install jenkins
            sudo systemctl start jenkins


  #Creating the instance to install tomcat
  Tomcat:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      ImageId: !Ref InstanceAMI
      Tags:
        - Key: Name
          Value: !Join ['-',[!Sub '${Project}',!Sub '${EnvName}','Tomcat']]
      InstanceType: !Ref InstanceType
      SubnetId: !Ref privSubnet
      SecurityGroupIds:
        - !Ref WebSecGrp
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x
            yum update -y
            yum install java-1.8.0-openjdk
            wget https://apachemirror.wuchna.com/tomcat/tomcat-9/v9.0.46/bin/apache-tomcat-9.0.46.tar.gz /tmp
            sudo tar -xvf /tmp/apache-tomcat-9*.tar.gz -C /opt/tomcat
            sudo sh -c 'chmod +x /opt/tomcat/bin/*.sh'
            sudo systemctl start tomcat


Outputs:

# Web DNS Name
  Server1:
    Description: Public DNSName of the newly created EC2 instance 1
    Value: !GetAtt 
      - Jenkins
      - PublicDnsName
  Server2:
    Description: Public DNSName of the newly created EC2 instance 1
    Value: !GetAtt 
      - Tomcat
      - PublicDnsName


  #Environment and Project details:
  
  EnvName:
    Description: Environment
    Value: !Sub ${EnvName}
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-EnvName"

  Project:
    Description: Project
    Value: !Sub ${Project}
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Project"